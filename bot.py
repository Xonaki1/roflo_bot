import os
import sys
import logging
import tempfile
import base64
from logging.handlers import RotatingFileHandler
from dotenv import load_dotenv
import telebot
from google import genai

load_dotenv()

log_file = "bot.log"
max_bytes = 5 * 1024 * 1024
backup_count = 5

file_handler = RotatingFileHandler(
    log_file, maxBytes=max_bytes, backupCount=backup_count, encoding="utf-8"
)
file_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s, %(levelname)s, %(message)s")
file_handler.setFormatter(formatter)

stream_handler = logging.StreamHandler(sys.stdout)
stream_handler.setLevel(logging.DEBUG)
stream_handler.setFormatter(formatter)

logging.basicConfig(level=logging.DEBUG, handlers=[file_handler, stream_handler])

GOOGLE_API_KEY = os.getenv("GOOGLE_API")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

bot = telebot.TeleBot(TELEGRAM_TOKEN)

client = genai.Client(api_key=GOOGLE_API_KEY)


def ask_gemini_text(prompt):
    try:
        response = client.models.generate_content(
            model="gemini-2.5-flash", contents=[{"text": prompt}]
        )
        return response.text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini API: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –º–æ–¥–µ–ª–∏ Gemini."


def send_stub_message(chat_id, format_name):
    bot.send_message(
        chat_id,
        f"–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å {format_name}, –∑–∞–∫–∏–Ω—å—Ç–µ –¥–µ–Ω–µ–≥ –Ω–∞ –æ–ø–ª–∞—Ç—É –ò–ò –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —ç—Ç–æ –¥–æ–±–∞–≤–∏—ÇüôÇ",
    )


@bot.message_handler(commands=["start"])
def handle_start(message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç - –Ω–µ–π—Ä–æ—Å–µ—Ç—å.\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É, –Ω–∞–≤–µ—Ä–Ω–æ–µ.\n"
        "–ê –º–æ–∂–µ—Ç –∏ –Ω–µ—Ç, —Ö–∑."
    )
    bot.send_message(message.chat.id, welcome_text)


@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    send_stub_message(message.chat.id, "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")


@bot.message_handler(content_types=["voice"])
def handle_voice(message):
    send_stub_message(message.chat.id, "–≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


@bot.message_handler(content_types=["document"])
def handle_document(message):
    send_stub_message(message.chat.id, "–¥–æ–∫—É–º–µ–Ω—Ç—ã")


@bot.message_handler(content_types=["location"])
def handle_location(message):
    send_stub_message(message.chat.id, "–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")


@bot.message_handler(content_types=["text"])
def handle_message(message):
    user_text = message.text.strip()
    if user_text.lower() == "–¥—É—Ä–∏–ª–∞":
        bot.send_message(message.chat.id, "–°–∞–º —Ç—ã –¥—É—Ä–∏–ª–∞")
        return

    bot.send_chat_action(message.chat.id, "typing")
    response = ask_gemini_text(user_text)
    if not response:
        response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."
    bot.send_message(message.chat.id, response)


def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    bot.infinity_polling()


if __name__ == "__main__":
    main()
